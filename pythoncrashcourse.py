# -*- coding: utf-8 -*-
"""PythonCrashCourse.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10juRmtp0BYwMfMxAP2KxRvV8tScBZat5
"""

# Using variables in a print statement

num = 12
name = 'Sam'
food = 'Pizza'
print('My number is {} and my name is {}'.format(num,name)) 

# Alternative way in case you have more than one curly brace and don't want to keep track by memory
# print('My number is {one} and my name is {two}, and I like {three}'.format(one=num,two=name,three=food)) 

# Or if you want to use the same variable twice in the same sentence
# print('My number is {one} and my name is {two}, and I am {one} years old'.format(one=num,two=name))

# Adding to a set 

s = {1, 2, 3} 
print(s)

s.add(5)
print(s)

# Traversing Arrays with Loops

# Ex 1
seq = [1,2,3,4,5]

for i in seq:
  print(i)
print('\n')

# Ex 2
for i in seq:
  print('Hello World')
print('\n')

# Ex 3
j = 1 

while j < 5:
  print('j is: {}'.format(j))
  j += 1 # In this instance you need a counter. Otherwise, it will infinitely loop.
print('\n')

# Ex 4
for i in range(0,5):
  print(i)
print('\n')

# Creating a list using range function
list(range(10)) # Increments from zero to 10 with 10 not included

# Creating an empty list to manipulate 

x = [1,2,3,4]
out = [] # Empty array

for num in x:
  out.append(num**2) # num squared notation **
print(out) 
print('\n')

# Alternative way
[num**2 for num in x]
print('\n')

# Assigning alternative way to variable
out = [num**2 for num in x]
print(out)

"""**Functions**"""

# Ex 1
def my_func(name):
  print('Hello, my name is {}'.format(name)) # First way
  #print('Hello, my name is '+name) # Second way

my_func('Dennis')
print('\n') 

# Ex 2
def square(num):
  return num**2

output = square(2)
print(output)

# Using a function on a list with map function

# Ex 1
def times2(var):
  return var*2

print(times2(5)) 
print('\n')

seq = [1,2,3,4,5]
print(list(map(times2,seq))) 
print('\n')

# Lambda version of Ex 1 - instead of writing entire function, it can be done in one line
t = lambda var:var*2
print(t(6))
print('\n')

# Using this on map function from seq variable above
print(list(map(lambda num: num*3, seq))) 
print('\n')
# Filtering out numbers
# In this case, finding numbers in seq list divisible by 2
print(list(filter(lambda num: num%2 == 0, seq)))

"""**Methods**"""

# Using dot . to manipulate objects

# Ex 1
s = 'Hello, my name is Dennis'

# The s. will list a bunch of functions you can perform on the variable
print(s.lower())
print('\n')
print(s.upper())
print('\n')
print(s.split()) 
print('\n')

# Split ex
tweet = 'Go Raiders! #Sports'
print(tweet.split('#')) # Grabs strings 
print('\n')
print(tweet.split('#')[1]) # Grabs string from hashtagged line 
print('\n')

# Dot operator on dictionaries
d = {'k1': 1, 'k2': 2}
print(d)
print('\n')
d.keys() # Shows you keys in dict
print('\n')
d.items() # Returns items of dict
print('\n')
d.values() # Returns key values

"""**Useful Methods for Lists**"""

# Ex 1
lst = [1,2,3]
item = lst.pop() # Pops/Returns last item in list 
print(item)
print('\n')
print(lst) 
print('\n')

# Ex 2
list = [1,2,3,4,5]
first = list.pop(0)
print(list)
print('\n')

# Appending a list
list.append('New')
print(list) 
print('\n') 

# Checking for value in a list
#'x' in [1,2,3]
#'x' in ['x','y','z']
#'New' in list

"""**Unpacking**"""

# Ex 1 - List of tuples
x = [(1,2), (3,4), (5,6)] 
print(x)
print('\n')
print(x[0])
print('\n')
print(x[0][0])
print('\n')
print(x[0][1])
print('\n')
for item in x:
  print(item)
print('\n')
for (a,b) in x:
  print(a) # Prints a column
print('\n')
for (a,b) in x:
  print(b) # Prints b column
print('\n')
for a,b in x: # Prints both columns continuously
  print(a)
  print(b)

"""**Create a function that grabs the email website domain from a string in the form: user@domain.com** 

Output should be: domain.com
"""

def domainGet(email):
  return email.split('@')[1]
  
domainGet('user@domain.com')

"""Write a function to return one of 3 possible results after getting stopped for speeding:

"No ticket"
"Small ticket"
"Big ticket"

If speed is 60 or less, no ticket
If speed is 61 and 80 inclusive, small ticket
If speed is 81 or more, big ticket

**Unless it is your birthday
On your birthday, your speed can be 5 miles higher in all cases
"""

# First attempt
cumple = input('Is it your birthday?: ')
velocidad = int(input('Enter your speed here: ')) 

# def ticket(velocity, isBirthday):
#   if cumple == 'Yes':
#       if velocity == 65:
#         print('no ticket')
#         if velocity in range(66, 87):
#           print('Small ticket')
#         elif velocity >= 86: 
#           print('Big ticket')   
#   else:
#     if velocity == 60:
#       print('no ticket')
#       if velocity in range(61, 81):
#         print('Small ticket')
#       elif velocity >= 81:
#         print('Big ticket')


# ticket(speed, cumple) 

# Actual solution

def caughtSpeeding(speed, is_birthday):

  if is_birthday == 'Yes' : # added the == operator here
    speeding = speed - 5
  else:
    speeding = speed 
  if speeding >= 80: # Guy asked for inclusive but forgot the = sign so I added it
    return 'Big Ticket'
  elif speeding > 60:
    return 'Small Ticket'
  else:
    return 'No Ticket' 

caughtSpeeding(velocidad, cumple) # kept input variables at top of cell

"""**IF VS ELIF Statments!**"""

# Difference between if and elif

# elif allows you to check for multiple expressions
# If will make the program stop at that line if the condition applies

